
linux-vdso is not a shared libarry on a disk, linux kernel bakes it on the fly!

GS register stores the base address for per-cpu are

Latency 5-10microseconds

IA32_LSTAR MSR - register container kernel entyry code (Code and stack selctors) to handle sys calss
Modern linxu uses SYSCALL and SYSRET INSTRUCTIONS!
------------------

vDSO loads dynamically and implements four system calls:
__vdso_clock_gettime;
__vdso_getcpu;
__vdso_gettimeofday;
__vdso_time

VDSO maps memory in shared form! And allows those sys call
executions to happen in the user space!

--------------------
ebfore sys call linux would store stack pointer to TSS(Task Stae Segment - onnly one per CPU!)

ENTRY(entry_SYSCALL_64)

  movq	%rsp, PER_CPU_VAR(rsp_scratch) - store RSP into TSS 
 movq	PER_CPU_VAR(cpu_current_top_of_stack), %rsp -  and then load kernel RSP 

 * SYSCALL instructions can be found inlined in libc implementations as
 * well as some other programs and libraries.  There are also a handful
 * of SYSCALL instructions in the vDSO used, for example, as a
 * clock_gettimeofday fallback.
 *
 * 64-bit SYSCALL saves rip to rcx, clears rflags.RF, then saves rflags to r11,
 * then loads new ss, cs, and rip from previously programmed MSRs.
 * rflags gets masked by a value from another MSR (so CLD and CLAC
 * are not needed). SYSCALL does not save anything on the stack
 * and does not change rsp.
 *
 * Registers on entry:
 * rax  system call number
 * rcx  return address
 * r11  saved rflags (note: r11 is callee-clobbered register in C ABI)
 * rdi  arg0
 * rsi  arg1
 * rdx  arg2
 * r10  arg3 (needs to be moved to rcx to conform to C ABI)
 * r8   arg4
 * r9   arg5
 * (note: r12-r15, rbp, rbx are callee-preserved in C ABI)
 *
 * Only called from user space.

RCX and r11 are changed by syscall instruction!

 The following registers should hold its arguments: rdi, rsi, rdx, r10, r8, and r9.
System call cannot accept more than six argument

Note that it also switches to kernel's stack!