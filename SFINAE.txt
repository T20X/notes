---------------------------
SFINAE only works in the template context, so the member function itself has to be a template
SFINAE only works if the functions can make it in the overload set!
    for example this won't work
        explicit operator->()
        operator->()
-------------------
the overload resolution is done only on the basis of the function declarationâ€”the parameters, the default arguments, and the return type (the latter is not used to deduce types or select a better overload, but still undergoes type substitution and is covered by SFINAE)
--------------
TEMPLATE SEQUENCE 
------------
instantiation -> deduction -> substitution -> evaluation!

SFINAE - is not only substitution failure it is also deduction failure

Type deduction does not consider implicit conversions (other than type adjustments listed above): that's the job for overload resolution, which happens later. However, if deduction succeeds for all parameters that participate in template argument deduction, and all template arguments that aren't deduced are explicitly specified or defaulted, then the remaining function parameters are compared with the corresponding function arguments. For each remaining parameter P with a type that was non-dependent before substitution of any explicitly-specified template arguments, if the corresponding argument A cannot be implicitly converted to P, deduction fails.

//this works because vector T's get deduced properly and void deduce(const std::vector<T>& vec, typename Identity<T>::type v) fails to be deduced! 
void deduce(const std::vector<T>& vec, typename Identity<T>::type v)



Template argument deduction takes place after the function template name lookup (which may involve argument-dependent lookup) and before template argument substitution (which may involve SFINAE) and overload resolution.

Alias templates are not deduced , except in class template argument deduction (since C++20)

All the expressions won't lead to a SFINAE. A broad rule would be to say that all the substitutions out of the function/methods body are "safes"

Substitution proceeds in lexical order and stops when a failure is encountered.

template <typename A>
struct B { using type = typename A::type; };
 
template <
  class T,
  class   = typename T::type,      // SFINAE failure if T has no member type
  class U = typename B<T>::type    // hard error if T has no member type
                                   // (guaranteed to not occur as of C++14)
> void foo (int);

------
not deduced contexts
----
 If a template parameter appears in a non-deduced context within a function signature, it can't be deduced from the actual argument

 That said, it's important to understand what "sizeof doesn't evaluate its expression argument" means. It means the expression value isn't calculated, but the expression type is. In your example

sizeof
decltype

(1)  funtion() -> decltype based!

Expression SFINAE
------------------

template <class C, class F>
auto test(C c, F f) -> decltype((void)(c.*f)(), void())
{ std::cout << "Reference overload called\n"; }

template <class C, class F>
auto test(C c, F f) -> decltype((void)((c->*f)()), void())
{ std::cout << "Pointer overload called\n"; }

auto enableIfSINAFE(Container& v) -> decltype(enable_if_t<is_same<Iter, random_access_iterator_tag>::value>(), void())
auto enableIfSINAFE(Container& v) -> decltype(enable_if_t<is_same<Iter, bidirectional_iterator_tag>::value>(), void())


      template<typename _Alloc2> static auto _S_select(_Alloc2& __a, int) -> decltype(__a.select_on_container_copy_construction()) { return __a.select_on_container_copy_construction(); }
      template<typename _Alloc2> static _Alloc2 _S_select(_Alloc2& __a, ...) { return __a; }


      template <class T>
auto inner2(T t,int) -> decltype(t.d(), void()) {
    std::cout << "inner2 worked 1!";
}

template <class T>
auto inner2(T t, int) -> decltype(t.f(), void()) {
    std::cout << "inner2 worked 1!";
}

template <class T>
void  inner2(T t, ...)  {
    std::cout << "inner2 worked 3!";
}


(2) 

void_t!
template< class... >
using void_t = void;
(since C++17)
This metafunction is used in template metaprogramming to detect ill-formed types in SFINAE context

// primary template handles types that have no nested ::type member:
template< class, class = std::void_t<> >
struct has_type_member : std::false_type { };
 
// specialization recognizes types that do have a nested ::type member:
template< class T >
struct has_type_member<T, std::void_t<typename T::type>> : std::true_type { };
OR
template< class T >
struct has_type_member<T, std::void_t<decltype(T::member)> : std::true_type { };


(3) 
template<class _FwdIt,
        class _Ty> inline
        typename _Fill_memset_is_safe_helper<_FwdIt, _Ty>::type
        _Fill_memset_is_safe(const _FwdIt&, const _Ty&)
    {	// type deduction for _Fill_memset_is_safe_helper
        return {};
    }

trick is that {} will force default construction! but not for void in which case SFINAE kicks in!


-------------
CASES OF SFINAE  ERRORS
-------------
(4)
attempting to use a type that is not a class or enumeration on the left of a scope resolution operator ::
template <class T> int f(typename T::B*);
template <class T> int f(T);
int i = f<int>(0); // uses second overload

(5)
attempting to create an array of void, array of reference, 
array of function, array of negative size, array of non-integral size, or array of size zero.
template <int I> void div(char(*)[I % 2 == 0] = 0) {
    // this overload is selected when I is even
}
template <int I> void div(char(*)[I % 2 == 1] = 0) {
    // this overload is selected when I is odd
}

(6) attempting to create a pointer to reference
(7) attempting to create a reference to void
(8) attempting to create pointer to member of T, where T is not a class type
template<typename T>
class is_class {
    typedef char yes[1];
    typedef char no [2];
    template<typename C> static yes& test(int C::*); // selected if C is a class type
    template<typename C> static no&  test(...);      // selected otherwise
  public:
    static bool const value = sizeof(test<T>(0)) == sizeof(yes);
};

(9)     template <typename Container, 
        typename IterCategory = std::iterator_traits<Container::iterator>::iterator_category, 
       std::enable_if_t<is_same<IterCategory, random_access_iterator_tag>::value, int> = 0>
        void multiEnableIfs(Container& c)
    {
        std::cout << "randon container!" << endl;
    }

    template <typename Container,
        typename IterCategory = std::iterator_traits<Container::iterator>::iterator_category,
        std::enable_if_t<!is_same<IterCategory, random_access_iterator_tag>::value, int> = 0>
        void multiEnableIfs(Container& c)
    {
        std::cout << "NOT randon container!" << endl;
    }

Note that it has to be int>= 0, just default template = void is not going to work because because default template arguments are
 not part of function template's signature, and declaring two different function templates with the same signature is illegal.