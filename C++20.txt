(1) reference_wrapper now can contains incomplete types!
(2) there are concepts and constraints!
-A concept is a named set of requirements. The definition of a concept must appear at namespace scope
- concepts are like compile time predicate and farily the same can be said about constraints, but concepts emobyd semantics(meaning!)
- Each concept is a predicate, evaluated at compile time, and becomes a part of the interface of a template where it is used as a constraint
- Violations of constraints are detected at compile time, early in the template instantiation process, which leads to easy to follow error message
- The intent of concepts is to model semantic categories (Number, Range, RegularFunction) rather than syntactic restrictions (HasPlus, Array)
- The ability to specify a meaningful semantics is a defining characteristic of a true concept, as opposed to a syntactic constrain

Say Sorteable is concept, but constraint is say Subtractable, Incrementable

// Concepts cannot recursively refer to themselves and cannot be constrained
template <class T, class U> concept Derived = std::is_base_of<U, T>::value;
template<typename T>
concept Hashable = requires(T a) {
    { std::hash<T>{}(a) } -> std::convertible_to<std::size_t>;
};

template<C1 T> concept Error1 = true; // Error: C1 T attempts to constrain a concept definition
template<class T> requires C1<T> concept Error2 = true; // Error: the requires-clause attempts to constrain a concept

Explicit instantiations, explicit specializations, or partial specializations of concepts are not allowed (the meaning of the original definition of a constraint cannot be changed).

------------------------
The keyword requires is used to introduce a requires-clause, which specifies constraints on template arguments or on a function declaration

 the keyword requires must be followed by some constant expression (so it's possible to write requires true), but the intent is that a named concept (as in the example above) or a conjunction/disjunction of named concepts or a requires-expression is used
----------------------------------------------------------------------------
 constraint is a sequence of logical operations and operands that specifies requirements on template arguments. They can appear within requires-expressions (see below) and directly as bodies of concepts.
There are three types of constraints:

1) conjunctions
2) disjunctions
3) atomic constraints

The keyword requires is used to introduce a requires-clause, which specifies constraints on template arguments or on a function declaration
template<class T>
void g(T) requires is_purrable<T>(); // error, is_purrable<T>() is not a primary expression 
template<class T> void h(T) requires (is_purrable<T>()); // OK

The keyword requires is also used to begin a requires-expression, which is a prvalue expression of type bool that describes the constraints on some template arguments. Such an expression is true if the constraints are satisfied, and false otherwise
template<typename T>
concept Addable = requires (T x) { x + x; }; // requires-expression

template<typename T> requires Addable<T> // requires-clause, not requires-expression
T add(T a, T b) { return a + b; }

template<typename T>  requires requires (T x) { x + x; } // ad-hoc constraint, note keyword used twice
T add(T a, T b) { return a + b; }

Concepts works really well with lambdas!
template <class T>
concept Number = std::is_integer<T>::value;
auto f = [](Number n)