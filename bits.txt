(0) -1 trick! N - 1 will get all 1111 to right if N is power of 2
 For example: 4(0100) - 1 = 3(0011)
(1) LSB The expression x & (-x) clears all but the least-significant 1 bit,
(2) MSB

    msb = 1 << (BITS - 1);
    /* Perform bitwise AND with msb and num */
    if(num & msb)
        printf("MSB of %d is set (1).", num);
    else
        printf("MSB of %d is unset (0).", num);

(2) if N is power of 2! N & ( N - 1) == 0
(3) modulo!  pos = (pos+1) & (N - 1)

(4) bool odd(int n) { return n & 0x1; }
(5) int half(int n) { return n >> 1; }

(6) toggle j-th bit status
  i ^= (1 << j)

(7) swap without tmp variable
a = a^b      # mix of a and b
b = a^b      # a^b^b = a
a = a^b      # a^b^a = b

And XOR swap fails if you accidentally try to swap a value with itsel

(8) x = x | 0 and x = x ^ 0. Both are equivalent!

(9)     // k = 3, p = 1 
    int singleNumber(vector<int>& nums)
    {
        // even though we use integers here, but all the arhmnetic can be thought of as happening
        // per bit basis
        
        int x1 = 0, x2 = 0;
        for (auto v : nums)
        {
            // increment 2-bit counter rth bit counter for v( three times fit into 2 bits!)
            // example
            // 1st item got 1 in rth bit, then x1 rth bit is also 1
            // 2s item got 1 in rth bit, then x2 rth bit is also 1, but x1 gets XORed to 0
            // 3s item got 1 in rth bit, then x1 rth bit becomes 1
            x2 ^= (x1 & v);
            x1 ^= v;
            
            // need to reset the counter if it reaches 3!
            // for each rth bit of x1 and x2 we want to have a mask which would have for corresponding
            // bit 0 if we want to clear it with (&) and 1 otherwise if we want to keep the counter
            int mask = ~(x1 & x2); // if k is 4 then we'd have x1,x3,x3 for counters (3-bit counters) and
            //mask would have been 1(x3)0(x2)0(x1), which means formula for mask would become 
            //int mask = ~(~x1 & ~x2 & x3)
            
            //now need to apply the mask to reset correspondign counters 
            x2 &= mask;
            x1 &= mask;
        }
        
        return x1;
    }