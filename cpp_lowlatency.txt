The data interdependencies between instructions stall the pipeline, decreasing performance. The worst cases occur when the same register is read and modified by several consecutive instructions (think about rflags!)
-----------------
? : can disable RVO
multiple return statements can disable RVO
returning passed argument can disable RVO
----------------
auto may improve perfomance because there are not implicit conversions involved
-------------
    workPerThread = workPerThread & ~(pageSz - 1); IS FAST ALTERNATIVE TO
    workPerThread = (workPerThread / pageSz) * pageSz;

----------------------------------------------
std::to_string relies on the current locale for formatting purposes, and therefore concurrent calls to std::to_string from multiple threads may result in partial serialization of calls. C++17 provides std::to_chars as a higher-performance locale-independent alternative.
--------------------------------------------------
pow can be slow massively
--------------------------------------------------
std::function may allocate memory
--------------------------------------------------
no string optimization in gcc < 5.1 and redhat
--------------------------------------------------
placement new does null pointer check in GCC < 7.1 and without c++17
--------------------------------------------------
always_inline and noinline atrributes better then inline
--------------------------------------------------
__builtin_expect
----------------------------
cache L3 can be disabled
----------------------------
gperf - perfect function generator
----------------------------
_COARSE clock_gettime does not do a kernel mode switch
------------
 -ffast-math improves math ops performance by compromising precision. speeds up pow
------------------------------
In order to effectively write your code to take advantage of these rules, when writing if-else or switch statements, check the most common cases first and work progressively down to the least common
---------------------------
swtich (num)
case 1:
case 2
case N+1:
if increasing by step 1 then compiler can easily optimizy it by just applying offset!

--------------------
 static_assert(
      (kMaxCpus & (kMaxCpus - 1)) == 0,
      "kMaxCpus should be a power of two so modulo is fast")

then module could be done like x & (b - 1)

but carefull abotu sequence points! readPos = ++readPos & (N - 1); - BUG!
shall be readPos++; readPos = readPos & (N - 1)
---------------------
Pause prevents speculative execution, eliminating the branch misprediction penalty
---------------------------

trivial classes/structs can be copied with memcpy which is an important optimization!
pair and tuple are not trivial classes!

A type that is trivial can be statically initialized
standart layoout classes can be used in other programming languages!
(gcc does not allow __attribute__((__packed__)) on structs that
 * contain non-POD data)

Trivial class req (can be statically initialized and memcpy optimized)
--------------
It has no virtual functions
It has no virtual base classes
Every copy constructor is trivial or deleted
Every move constructor is trivial or deleted
Every copy assignment operator is trivial or deleted
Every move assignment operator is trivial or deleted
at least one copy constructor, move constructor, copy assignment operator, or move assignment operator is non-deleted
Trivial non-deleted destructor



restrict
-------------
In the C programming language, as of the C99 standard, restrict is a keyword that can be used in pointer declarations. The restrict keyword is a declaration of intent given by the programmer to the compiler. It says that for the lifetime of the pointer, only the pointer itself or a value directly derived from it (such as pointer + 1) will be used to access the object to which it point

If the compiler knows that there is only one pointer to a memory block, it can produce better optimized code. For instance:

void updatePtrs(size_t *ptrA, size_t *ptrB, size_t *val)
{
  *ptrA += *val;
  *ptrB += *val;
}
In the above code, the pointers ptrA, ptrB, and val might refer to the same memory location, so the compiler may generate less optimal code:

The restrict keyword only affects pointers of compatible types (e.g. two int*) because the strict aliasing rules says that aliasing incompatible types is undefined behavior by default, and so compilers can assume it does not happen and optimize away

---------
Branch elimination techniques!
------
(1) r = (A >= B) ? CONST 1 : CONST2

xor ebx, ebx ; Clear ebx (X in the C code)
cmp A, B
setge bl ; When ebx = 0 or 1
; OR the complement condition
sub ebx, 1 ; ebx=11...11 or 00...00
and ebx, CONST3; CONST3 = CONST1-CONST2
add ebx, CONST2; ebx=CONST1 or CONST2

--------------
sprintf the fastest standart way to format double/float to string, but there is a formatter library as well do it even faster!

----------
-ffast-math -msse4.1 - fast double/floating calcs!


---------------
#pragma pack instructs the compiler to pack structure members with particular alignment. Most compilers, when you declare a struct, will insert padding between members to ensure that they are aligned to appropriate addresses in memory (usually a multiple of the type's size). This avoids the performance penalty (or outright error) on some architectures associated with accessing variables that are not aligned properly. For example, given 4-byte integers and the following struct:

struct Test
{
   char AA;
   int BB;
   char CC;
};
The compiler could choose to lay the struct out in memory like this:

|   1   |   2   |   3   |   4   |  

| AA(1) | pad.................. |
| BB(1) | BB(2) | BB(3) | BB(4) | 
| CC(1) | pad.................. |
and sizeof(Test) would be 4 Ã— 3 = 12, even though it only contains 6 bytes of data. The most common use case for the #pragma (to my knowledge) is when working with hardware devices where you need to ensure that the compiler does not insert padding into the data and each member follows the previous one. With #pragma pack(1), the struct above would be laid out like this:

|   1   |

| AA(1) |
| BB(1) |
| BB(2) |
| BB(3) |
| BB(4) |
| CC(1) |